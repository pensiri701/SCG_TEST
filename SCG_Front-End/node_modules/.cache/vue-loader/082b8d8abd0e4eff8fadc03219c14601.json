{"remainingRequest":"/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pensirikusalaporn/Projects/scg_resume/resume/src/components/Experience.vue?vue&type=template&id=8d8aa2cc&","dependencies":[{"path":"/Users/pensirikusalaporn/Projects/scg_resume/resume/src/components/Experience.vue","mtime":1589554469648},{"path":"/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pensirikusalaporn/Projects/scg_resume/resume/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}